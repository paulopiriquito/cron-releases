name: Get Latest Release Tag

on:
  workflow_call:
    inputs:
      owner:
        description: 'Owner of the GitHub repository'
        required: true
        type: string
      repo:
        description: 'Name of the GitHub repository'
        required: true
        type: string

jobs:
  get-latest-release-tag:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
      found: ${{ steps.check-tag.outputs.found }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get latest release tag
        id: get-tag
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = "${{ inputs.owner }}";
            const repo = "${{ inputs.repo }}";
            const query = `
              query {
                repository(owner: "${owner}", name: "${repo}") {
                  latestRelease {
                    tagName
                  }
                }
              }
            `;
            try {
              const result = await github.graphql(query);
              const tag = result.repository.latestRelease.tagName;
              if (!tag) {
                console.log('Latest release tag is null or empty');
                return { tag: '', found: false };
              }
              console.log(`Latest release tag: ${tag}`);
              return { tag: tag, found: true };
            } catch (error) {
              console.log(`Error calling GitHub API: ${error}`);
              return { tag: '', found: false };
            }

      - name: Check if tag was found
        id: check-tag
        run: echo ::set-output name=found::${{ steps.get-tag.outputs.found }}
